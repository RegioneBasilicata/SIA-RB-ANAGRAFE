package it.csi.solmr.business.anag;

import it.csi.solmr.dto.CodeDescription;
import it.csi.solmr.dto.StringcodeDescription;
import it.csi.solmr.dto.anag.AnagAziendaVO;
import it.csi.solmr.dto.anag.ElencoAziendeParticellaVO;
import it.csi.solmr.dto.anag.EsitoControlloParticellaVO;
import it.csi.solmr.dto.anag.FabbricatoVO;
import it.csi.solmr.dto.anag.FoglioVO;
import it.csi.solmr.dto.anag.ParticellaAziendaVO;
import it.csi.solmr.dto.anag.ParticellaCertificataVO;
import it.csi.solmr.dto.anag.ParticellaUtilizzoVO;
import it.csi.solmr.dto.anag.ParticellaVO;
import it.csi.solmr.dto.anag.UteVO;
import it.csi.solmr.dto.anag.sian.SianTerritorioVO;
import it.csi.solmr.dto.profile.RuoloUtenza;
import it.csi.solmr.exception.SolmrException;

import java.util.Date;
import java.util.Vector;

import javax.ejb.Local;

@Local
public interface FascicoloLocal {
  public Vector<UteVO> getUTE(Long idAzienda, Boolean storico) throws SolmrException, Exception;
  public UteVO getUteById(Long idUte) throws Exception;
  //public UteVO serviceGetUteById(Long idUte) throws Exception;
  //public UteVO[] serviceGetUteByIdRange(Long idUteRange[]) throws Exception;
  public void deleteUTE(Long idUte) throws SolmrException, Exception;
  public void updateUTE(UteVO uteVO) throws SolmrException, Exception;
  public Vector<UteVO> getElencoUteAttiveForAzienda(Long idAzienda) throws SolmrException, Exception;
  public Vector<CodeDescription> getSezioniByComune(String istatComune) throws SolmrException, Exception;
  public Vector<FoglioVO> getFogliByComuneAndSezione(String istatComune, String sezione, Long foglio) throws SolmrException, Exception;
  public Vector<ParticellaVO> getParticelleByParametri(String descrizioneComune, Long foglio, String sezione, Long particella, String flagEstinto) throws SolmrException, Exception;
  public String ricercaSezione(String istatComune, String sezione) throws SolmrException, Exception;
  public FoglioVO ricercaFoglio(String istatComune, String sezione, Long foglio) throws SolmrException, Exception;
  public ParticellaVO ricercaParticellaAttiva(String istatComune, String sezione, Long foglio, Long particella, String subalterno) throws SolmrException, Exception;
  public void checkParticellaByAzienda(Long idParticella, Long idAzienda) throws SolmrException, Exception;
  public Vector<ElencoAziendeParticellaVO> elencoAziendeByParticellaAndConduzione(Long idParticella, Long idAzienda) throws SolmrException, Exception;
  public java.util.Date getMaxDataFineConduzione(Long idParticella, Long idAzienda) throws SolmrException, Exception;
  public Vector<CodeDescription> getTipiUtilizzoAttivi() throws SolmrException, Exception;
  public Vector<CodeDescription> getTipiUtilizzoAttivi(int idIndirizzo) throws SolmrException, Exception;
  public Long insertParticella() throws SolmrException, Exception;
  public ParticellaVO ricercaParticellaProvvisoriaAttiva(String istatComune, String sezione, Long foglio) throws SolmrException, Exception;
  public ParticellaVO ricercaParticella(String istatComune, String sezione, Long foglio, Long particella, String subalterno) throws SolmrException, Exception;
  public void cessaParticelleByIdParticellaRange(long idParticella[]) throws SolmrException, Exception;
  public double getMaxSupCatastaleInseribile(Long idParticella) throws SolmrException, Exception;
  public ParticellaVO findParticellaByPrimaryKey(Long idStoricoParticella) throws SolmrException, Exception;
  public Vector<ParticellaVO> getElencoParticelleFabbricatoByUte(Long idUte,boolean serra) throws SolmrException, Exception;
  public String getSuperficiFabbricatiByParticella(Long idUte, Long idParticella) throws SolmrException, Exception;
  public Long inserisciFabbricato(FabbricatoVO fabbricatoVO, Vector<ParticellaVO> elencoParticelleSelezionate, long idUtenteAggiornamento) throws SolmrException, Exception;
  public Vector<FabbricatoVO> ricercaFabbricatiByAzienda(Long idAzienda, String dataSituazioneAl) throws SolmrException, Exception;
  public FabbricatoVO findFabbricatoByPrimaryKey(Long idFabbricato) throws SolmrException, Exception;
  public Vector<ParticellaVO> getElencoParticelleByFabbricato(FabbricatoVO fabbricatoVO, boolean modifica) throws Exception;
  public Vector<ParticellaVO> getElencoParticelleFabbricatoByUteAssociabili(Long idUte, Vector<Long> elencoParticelle, boolean serra) throws SolmrException, Exception;
  public void cessaUtilizzoParticellaFabbricato(FabbricatoVO fabbricatoVO) throws SolmrException, Exception;
  public void deleteParticellaFabbricato(ParticellaVO particellaFabbricatoVO) throws SolmrException, Exception;
  public Long modificaFabbricato(FabbricatoVO fabbricatoVO, Vector<ParticellaVO> particelleForFabbricato, Vector<ParticellaVO> elencoParticelleAssociate, Vector<ParticellaVO> elencoParticelleAssociabili, long idUtenteAggiornamento, long idAzienda) throws SolmrException, Exception;
  public void deleteParticellaFabbricatoByIdFabbricato(FabbricatoVO fabbricatoVO) throws SolmrException, Exception;
  public int getNumRecordParticellaFabbricato(Long idFabbricato) throws SolmrException, Exception;
  public void deleteFabbricato(FabbricatoVO fabbricatoVO) throws SolmrException, Exception;
  public void eliminaFabbricato(FabbricatoVO fabbricatoVO, long idAzienda) throws SolmrException, Exception;
  public Vector<UteVO> getElencoUteAttiveForDateAndAzienda(Long idAzienda, String data) throws SolmrException, Exception;
  public Vector<ParticellaVO> getElencoParticelleForUteAndAzienda(Long idAzienda) throws SolmrException, Exception;
  public Vector<ParticellaVO> getElencoParticelleForUteAndAziendaPossAndComune(Long idAzienda) throws SolmrException, Exception;
  public Vector<ParticellaVO> getElencoParticelleForUteAndAziendaComune(Long idAzienda) throws SolmrException, Exception;
  public Vector<ParticellaVO> ricercaParticelleAttiveByParametri(ParticellaVO particellaVO, String data, Long idAzienda) throws SolmrException, Exception;
  public void checkCessaAziendaByConduzioneParticella(Long idUte) throws SolmrException, Exception;
  public boolean isDataInizioValida(long idAzienda,Date dataInizio) throws SolmrException, Exception;
  public Vector<CodeDescription> getListaDateConsistenza(Long idAzienda) throws SolmrException, Exception;
  public Vector<ParticellaVO> getElencoConsistenzaParticelleForAzienda(Long idAzienda, Long idDichiarazioneConsistenza) throws SolmrException , Exception;
  public void checkLastAggiornamentoAfterMaxDichConsistenza(Long idAzienda) throws SolmrException, Exception;
  public Vector<ParticellaVO> getElencoConsistenzaParticelleForAziendaAndPossessoAndComune(Long idAzienda, Long idDichiarazioneConsistenza) throws SolmrException, Exception;
  public Vector<ParticellaVO> getElencoConsistenzaParticelleForAziendaAndComune(Long idAzienda, Long idDichiarazioneConsistenza) throws SolmrException, Exception;
  public String getAnnoPrevisioneUtilizzi(Long idAzienda) throws SolmrException, Exception;
  public String getTotaleSupCondotteByAzienda(Long idAzienda, String data) throws SolmrException, Exception;
  public Vector<ParticellaVO> getElencoConsistenzaParticelleForAziendaAndDestinazioneUso(Long idAzienda, Long idDichiarazioneConsistenza, Long idConduzioneParticella) throws SolmrException, Exception;
  public Vector<ParticellaUtilizzoVO> getElencoConsistenzaParticelleForAziendaAndUsoSecondario(Long idAzienda, Long idDichiarazioneConsistenza) throws SolmrException, Exception;
  public Vector<ParticellaVO> ricercaParticelleStoricizzateByParametri(ParticellaVO particellaVO, Long idDichiarazioneConsistenza) throws SolmrException, Exception;
  public ParticellaVO getDettaglioParticellaDatiTerritoriali(Long idStoricoParticella) throws SolmrException, Exception;
  public Vector<ParticellaUtilizzoVO> getElencoParticellaUtilizzoVO(Long idConduzioneParticella, String anno) throws SolmrException, Exception;
  public double getTotaleSupUtilizzateByIdConduzioneParticella(Long idConduzioneParticella, String anno) throws SolmrException, Exception;
  public ParticellaVO getDettaglioParticellaStoricizzataDatiTerritoriali(Long idConduzioneDichiarata) throws SolmrException, Exception;
  public ParticellaVO getDettaglioParticellaStoricizzataConduzione(Long idConduzioneDichiarata) throws SolmrException, Exception;
  public Vector<ParticellaUtilizzoVO> getElencoStoricoParticellaUtilizzoVO(Long idConduzioneDichiarata, Long idDichiarazioneConsistenza) throws SolmrException, Exception;
  public Vector<CodeDescription> getTipiUtilizzoForIdIndirizzoTipoUtilizzo(Long idTipoIndirizzoUtilizzo) throws SolmrException, Exception;
  public Vector<ParticellaVO> ricercaParticelleByParametriAndUtilizzi(ParticellaVO particellaRicercaVO, Long idAzienda) throws SolmrException, Exception;
  public Vector<ParticellaVO> ricercaParticelleByParametriAndUtilizzoSpecificato(Long idAzienda, ParticellaVO particellaRicercaVO) throws SolmrException, Exception;
  public Vector<ParticellaVO> ricercaParticelleByParametriSenzaUsoSuolo(ParticellaVO particellaRicercaVO, Long idAzienda) throws SolmrException, Exception;
  public Vector<ParticellaVO> ricercaParticelleStoricizzateByParametriAndUtilizzo(ParticellaVO particellaRicercaVO) throws SolmrException, Exception;
  public Vector<ParticellaVO> ricercaParticelleStoricizzateByParametriAndUtilizzoSpecificato(ParticellaVO particellaRicercaVO) throws Exception, SolmrException;
  public Vector<ParticellaVO> ricercaParticelleStoricizzateByParametriSenzaUsoSuolo(ParticellaVO particellaRicercaVO) throws SolmrException, Exception;
  public void checkUpdateSuperficie(Long idAzienda) throws SolmrException, Exception;
  public ParticellaVO getParticellaVOByIdUtilizzoParticella(Long idUtilizzoParticella) throws SolmrException, Exception;
  public ParticellaVO getParticellaVOByIdConduzioneParticella(Long idConduzioneParticella) throws SolmrException, Exception;
  public double getTotSupUtilizzateByIdCondParticellaNotIncludeIdUtilizzo(Long idConduzioneParticella, Long idUtilizzoParticella, String anno) throws SolmrException, Exception;
  public Date getMaxDataDichiarazioneConsistenza(Long idAzienda) throws SolmrException, Exception;
  public String getTotaleSupCondotteByIdParticellaNotIncludeIdConduzioneParticella(Long idConduzioneParticella, Long idParticella) throws SolmrException, Exception;
  public Vector<ParticellaVO> getElencoDichiarazioniConsistenzaByIdAzienda(Long idAzienda) throws SolmrException, Exception;
  public String getTotaleSupCondotteDichiarateByAzienda(Long idAzienda, Long idDichiarazioneConsistenza) throws SolmrException, Exception;
  public void checkEliminaUtilizziVigneto(Vector<String> elencoIdUtilizziParticella) throws SolmrException, Exception;
  public void checkParticellaLegataDichiarazioneConsistenza(Vector<Long> elencoParticelle) throws Exception, SolmrException;
  public void deleteUtilizzoParticellaByIdConduzioneParticella(Long idConduzioneParticella) throws Exception, SolmrException;
  public void deleteConduzioneParticella(Long idConduzioneParticella) throws SolmrException, Exception;
  public void eliminaParticelle(Vector<Long> elencoConduzioni, Long idAzienda, RuoloUtenza ruoloUtenza) throws SolmrException, Exception;
  public void cessaFabbricato(Long idFabbricato, long idUtenteAggiornamento) throws SolmrException, Exception;
  public void cessazioneUTE(UteVO uteVO, long idUtenteAggiornamento) throws SolmrException, Exception;
  public ParticellaVO getParticellaVOByIdConduzioneParticellaSenzaUsoSuolo(Long idConduzioneParticella, String anno) throws SolmrException, Exception;
  public ParticellaVO getDettaglioParticellaDatiTerritorialiByIdConduzioneParticella(Long idConduzioneParticella) throws SolmrException, Exception;
  public void allegaUtilizziToNewConduzioneParticella(Long newIdConduzioneParticella, Long oldIdConduzioneParticella) throws SolmrException, Exception;
  public Vector<ParticellaVO> ricercaTerreniByParametri(ParticellaVO particellaRicercaTerrenoVO) throws SolmrException, Exception;
  public boolean isParticellaContenziosoOnAzienda(Long idStoricoParticella) throws SolmrException, Exception;
  public String getTotSupCondotteByIdStoricoParticella(Long idStoricoParticella) throws SolmrException, Exception;
  public Vector<ParticellaAziendaVO> getElencoAziendeAndConduzioniByIdStoricoParticella(Long idStoricoParticella, boolean attive) throws Exception, SolmrException;
  public Vector<ParticellaUtilizzoVO> getElencoUtilizziAttiviByAnnoAndIdStoricoParticella(Long idStoricoParticella, String anno) throws Exception, SolmrException;
  public int countParticelleConConduzioniAttive(long idParticella[]) throws SolmrException, Exception;
  public Vector<StringcodeDescription> getListaComuniTerreniByIdAzienda(Long idAzienda) throws Exception, SolmrException;
  public String getTotaleSupCondotteAttiveByIdParticella(Long idParticella, Long idAzienda) throws Exception, SolmrException;
  public Vector<ParticellaUtilizzoVO> getElencoParticelleForAziendaAndUsoSecondario(Long idAzienda, String anno) throws SolmrException, Exception;
  public Vector<EsitoControlloParticellaVO> getElencoEsitoControlloParticella(Long idConduzioneParticella) throws Exception, SolmrException;
  public String getDataUltimaEsecuzioneControlli(Long idAzienda) throws Exception;
  public ParticellaCertificataVO findParticellaCertificataByParametri(ParticellaVO particellaVO) throws Exception;
  public Vector<ParticellaVO> getElencoStoricoParticella(Long idParticella) throws SolmrException, Exception;
  public void eliminaUtilizzoParticella(Vector<String> elencoConduzioni, Vector<String> elencoIdUtilizzoParticella, long idUtenteAggiornamento) throws SolmrException, Exception;
  public Vector<ParticellaVO> getElencoParticelleForImportByAzienda(AnagAziendaVO searchAnagAziendaVO, AnagAziendaVO anagAziendaVO, RuoloUtenza ruoloUtenza) throws Exception, SolmrException;
  public Vector<Long> getListIdUteByIstatComuneAndIdAzienda(String istatComune, Long idAzienda, boolean isActive) throws Exception, SolmrException;
  public ParticellaVO getStoricoParticella(Long idStoricoParticella) throws Exception;
  public Vector<CodeDescription> getIndirizziTipiUtilizzoAttivi() throws SolmrException, Exception;
  public Vector<ParticellaVO> getElencoParticelleForAziendaAndUtilizzo(Long idAzienda, String anno) throws SolmrException, Exception;
  public SianTerritorioVO[] verificaCensimentoFoglio(SianTerritorioVO[] elencoSian) throws Exception;
}
