/* Generated by Together */

package it.csi.solmr.exception;

import it.csi.solmr.util.SolmrLogger;

/**
 * Eccezione generica che permette di incapsulare l'eccezione di origine.
 * E' utile per recuperare lo stack trace nel contesto del chiamante
 *
 * N.B.
 * A partire dal JDK 1.4 la classe Throwable supporta già nativamente la tecnica
 * dell'exception chaining.
 */
public class ChainedException extends Exception {

    /**
	 * 
	 */
	private static final long serialVersionUID = 4183226225399403318L;

	protected static String message = "Eccezione generica";

	/** l'eccezione di origine */
    private Throwable cause;

    /**
     * @param str  Una stringa che descrive l'anomalia
     * @param cause    La precedente eccezione, sollevata nel metodo chiamato
     */
    public ChainedException(String str, Throwable cause) {
        super(str);
        this.cause = cause;
    }

    public ChainedException(String str) {
        this(str, null);
    }

    /** Costruttore di default. */
    public ChainedException() {
        this(message, null);
    }

    public ChainedException(Throwable cause) {
        this(message, cause);
    }

    /** Si ottiene il messaggio relativo all'eccezione precedentemente sollevata */
    public String getPreviousMessage() {
        return ("Received throwable with Message: " + cause.getMessage());
    }

    /** Si ottiene il messaggio attuale */
    public String getMessage() {
        return super.getMessage();
    }

    /**
     * Lo stack trace dell'eccezione all'origine
     */
    public void printPreviousStackTrace() {
      if (cause != null)
        cause.printStackTrace();
    }

    /**
     * Lo stack trace dell'eccezione all'origine
     */
    public void printStackTrace() {
        super.printStackTrace();
        if (cause != null) {
          SolmrLogger.error(this, "causato da:");
            cause.printStackTrace();
        }
    }

    public void printStackTrace(java.io.PrintStream ps) {
        super.printStackTrace(ps);
        if (cause != null) {
            ps.println("causato da:");
            cause.printStackTrace(ps);
        }
    }

    public void printStackTrace(java.io.PrintWriter pw) {
        super.printStackTrace(pw);
        if (cause != null) {
            pw.println("causato da:");
            cause.printStackTrace(pw);
        }
    }
}
